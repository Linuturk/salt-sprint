---
header:
  author: Kenneth Wilke and Eric Hernandez
  title: Salt Architecture
  description: Identify and understand the major components of a Salt deployment and their relationships to each other.

slides:
   -
     - nested:
         -
           - h1: Salt Architecture
           - ul:
             - Master and Minions
             - SSH key management
             - Salt Modules
         -
           - image: 'https://raw.githubusercontent.com/Linuturk/salt-sprint/master/fundamentals/salt-master-minions.png'

         -
           - h2: Salt Master
           - p: 'Controller of your Salt Minions'
           - ul:
             - /etc/salt/master
             - /var/log/salt/master
             - /etc/init.d/salt-master
             - Communicate via ZeroMQ or SSH
             - New RAET system replacing ZeroMQ
           - class_notes: |
               1. The salt master allows you to interact with salt minions.
               2. The configuration file for the Salt Master is located in /etc/salt/master.
               3. The service script for the Salt Master is located in /etc/init.d/salt-master.
               4. The log file for the Salt Master is located in /var/log/salt/master.
         -
           - h2: Salt Minion
           - p: 'Allows for a Salt Master to control a server'
           - ul:
             - /etc/salt/minion
             - /var/log/salt/minion
             - /etc/init.d/salt-minion
           - class_notes: |
               1. The salt master allows you to interact with salt minions.
               2. The configuration file for the Salt Master is located in /etc/salt/master.
               3. The service script for Salt Minion is located in /etc/init.d/salt-minion.
         -
           - h2: Key Management
           - ul:
             - SSH keys use for communications
             - Minions generate keys
             - salt-key on Master
             - /etc/salt/pki
           - class_notes: |
               1. The command salt-key works with the SSH keys used for master->minion connections.
               2. When the minion is first started it will generate cryptographic keys and attempt to connect to its configured master.
               3. Next step is to go to the master and use accept the key from the minion using the command salt-key.
               4. Keys stored in /etc/salt/pki on both master and minion, directory can be set in configuration files.
         -
           - image: 'http://jenkins.onitato.com:8080/job/Salt%20Sprint%20Slides/ws/fundamentals/salt-keys.png'
         -
           - h2: Salt Modules
           - ul:
             - Execution Modules
             - State Modules
             - and the rest...
           - class_notes: |
               1. Execution modules, usually written in python, allow you to run processes on a minion.
               2. An example of an execution module is the useradd module.
               3. State Modules are built on top of Execution Modules and allow you to combine actions in to a single state file.
               4. Salt execution modules are different from state modules and cannot be called directly within state files. You must use the module state module to call execution modules within state runs.
