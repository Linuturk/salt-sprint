---
header:
  author: PI
  title: How Does Salt Compare?
  description: How does salt stack up against other configuration management competitors?

slides:

   - set_global:
       transition: rotate

   -
     - nested:
         -
           - h1: Salt v. Chef v. Ansible
         -
           - h2: Nutshell
           - ul:
             - "Chef (2009) has been an industry standard, Puppet lineage, (2) flavors: Open Source, and Enterprise (adds hosted/private server, push capable, better web UI, central authentication, multi-tenancy, RBAC, reporting and support)"
             - "Ansible (2012) is very recent, fully open source, active community driven development, (3) flavors: Guru (command line core only), Tower (adds web UI, LDAP, ReST API), and Enterprise Tower (adds support + SLA) "
             - "Salt (2011) comes between Ansible and Chef in capability, fully open source, supports Windows, originally for remote execution "
         -
           - h2: Philosophy
           - ul:
             - "Chef is about coding in ruby to suit your needs, and leverages a large pre-built base of re-usable code"
             - "Ansible is about simple, extensible, batteries included, best ease of use, no coding"
             - "Salt is about simple, extensible, ultra high speed, enterprise scale, batteries included, coding optional"
           - class_notes: |
               Make sure everyone understands scaling
         -
           - h2: Languages
           - ul:
             - "Chef: Ruby code using a specialize DSL (Domain Specific Language)"
             - "Ansible: Python (but YAML for users)"
             - "Saltstack: Python (but YAML for users)"
           - class_notes: |
               Explain basic notion of a DSL, show Ruby v. YAML code snippets (next slide)
         -
           - h2: Adduser in Chef
           - code: |
               user "fred" do
                 supports :manage_home => true
                 comment "Fred Flintstone"
                 uid 4000
                 home "/home/fred"
                 shell "/bin/zsh"
               end
               group "wheel" do
                 action :modify
                 members "fred"
                 append true
               end
               group "storage" do
                 action :modify
                 members "fred"
                 append true
               end
           - class_notes: |
               Explain what ruby code is doing (creating a user 'fred')
               Assumes groups wheel and storage already exist
         -
           - h2: Adduser in Salt
           - code: |
               fred:
                 user.present:
                   - fullname: Fred Flintstone
                   - shell: /bin/zsh
                   - home: /home/fred
                   - uid: 4000
                   - gid: 4000
                   - groups:
                     - wheel
                     - storage
           - class_notes: |
               Explain how YAML is doing the same thing (creating a user 'fred')
         -
           - h2: Architecture
           - ul:
             - "Chef: Server + Client agent, or Solo (no network component)"
             - "Ansible: Agentless (uses ssh)"
             - "Salt: Master + Minion (client), or Standalone"
         -
           - h2: Management 
           - ul:
             - "Chef: Code based pull, but added ZeroMQ push feature recently"
             - "Ansible: YAML based push using ssh or ZeroMQ"
             - "Salt: YAML based push/pull"
           - class_notes: |
               Explain basic notion of a message queue, and push v. pull models
         -
           - h2: Communications
           - ul:
             - "Chef: standard key-based SSL"
             - "Ansible: standard SSH (or paramiko), MQ option"
             - "Salt: MQ, custom SSH"
           - class_notes: |
               Verify understanding of SSL, MQ
         -
           - h2: Templating
           - ul:
             - "Chef: Ruby ERB "
             - "Ansible: Jinja2"
             - "Salt: Jinja2, others"
           - class_notes: |
               Explain notion of templating
               Mention Ansible and Salt use jinja2 differently 
                 i.e. Ansible parses YAML files 1st, then does jinja2; Salt does jinja interpolations, then parses as YAML
         -
           - h2: Advantages of Salt
           - ul:
             - Agents add (targeting) flexibility
             - HA options availible
             - Highly modular
             - Friendly community driven development
             - API
             - Vendor agnostic infrastructure management
