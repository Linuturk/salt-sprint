---
header:
  author: CC, PI
  title: Chapter 1, Salt Fundamentals
  description: Salt Fundamentals Course

slides:
   -
     - nested:
         -
           - h1: Salt Terms

         -
           - h1: Master
           - p: A central Salt daemon from which commands can be issued to listening minions.

         -
           - h1: Minion
           - p: A server running a Salt minion daemon which can listen to commands from a master and perform the requested tasks. Generally, minions are servers which are to be controlled using Salt.
           - image: 'https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/minion.jpg'

         -
           - h1: Targeting
           - p: Specifying which minions should run a command or execute a state by matching against hostnames, or system information, or defined groups, or even combinations thereof.

         -
           - h1: Module
           - p: Functions called by the salt command that perform specific tasks.
           - p: There are many types of modules
           - ul:
             - execution module
             - state module

         -
           - h1: Salt-key
           - p: Executes simple management of Salt server public keys used for authentication between masters and minions.

         -
           - h1: Grain
           - p: A key-value pair which contains a fact about a system, such as its hostname, network addresses.

         -
           - h1: SLS
           - p: Stands for Salt State, and is the file extension used for state files.

         -
           - h1: State
           - p: The definition of the desired state of salt minions, States comprise of single or multiple salt modules.

         -
           - h1: State Module
           - p: A module which contains a set of functions (things that need to be done).

         -
           - h1: YAML
           - p: is a human-readable data format.

         -
           - h1: Why use Salt?
           - ul:
             - Automate
             - Configure
             - Deploy
             - Provision
           - class_notes: |
               1. Explain the need for automation in the ever growing scale of modern IT infrastructure. Example "patching heartbleed"
               2. Speak to the need to eliminate snow flake servers. Those special servers that can never be replicated
               3. Talk about deploying applications from source control and other uses
               4. Speak to the need for provisioning resources dynamically in the API based world we now live in

         -
           - h1: What can Salt do?
           - ul:
             - Configure
             - Deploy
             - Build
             - Execute and retrieve
             - Monitor
           - class_notes: |
               1. Talk to configuration management in general.
               2. Talk about building infrastructure via salt-cloud.
               3. Talk about running remote command adhoc, and speak to retrieving data about nodes.

         -
           - p: '<table style="display:inline-block;:"><tr><td><img style="width: 300px" src="http://www.john-james-andersen.com/wp-content/uploads/opscode_chef_html_logo.jpg"></td><td><img style="width: 300px" src="http://siliconflorist.com/wp-content/uploads/2010/07/puppet-labs.jpg"></td></tr><tr><td><img style="width: 300px" src="http://www.socallinuxexpo.org/sites/default/files/logos/AnsibleLogo_transparent_web.png"></td><td><img style="width: 300px" src="http://static.squarespace.com/static/524cf70fe4b05018590c3fb3/t/52718a36e4b079ec23e2c895/1383172756774/SaltStack%20logo%20-%20black%20on%20white.png?format=300w"></td></tr></table>'
           - class_notes: |
               1. Speak to the community around configuration management. And the differeing tools out there.
               2. Mention that we will compare them directly later but for now just use this to build context around what salt does.

         -
           - h2: Who uses Salt now?
           - p: '<table style="display:inline-block;:"><tr><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/lyft-miami-logo.jpg"></td><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/kubernetes-logo.png"></td><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/rackspace.jpg"></td></tr><tr><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/nasa.png"></td><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/Wikimedia.jpg"></td><td><img style="width: 300px" src="https://raw.githubusercontent.com/Linuturk/salt-sprint/master/images/LinkedIn-Logo.png"></td></tr></table>'
           - class_notes: |
               1. Give examples of how rackers have used salt. Example (heartbleed patching)
               2. Find examples of where customers have used salt or configuration management.
               3. See if any in the room have used salt.
               4. Touch on salts scale, Linkedin has more than 10k servers managed by a single master

         -
           - h2: What could you use Salt for?
           - ul:
             - 'In small groups discuss other ways salt could help improve a customers infrastructure.'
             - 'See what examples you can come up with where configuration management like salt would have saved time or resources.'
           - class_notes: |
               1. Get the class involved. However they want to come up with use cases based on what the know now, which isnt much but the concepts should be imediately practical
