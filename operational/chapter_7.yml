---
header:
  author: Allen Oster and Eric Hernandez
  title: Salt Operational, Chapter 6, Leveraging Grains and Pillars
  description: Explore the uses for the information provided by Salt grain and pillar data.

slides:
   -
     - nested:
         -
           - h1: Leveraging Grains and Pillars
           - ul: 
             - Grains
             - Pillar
             - Targeting
           - class_notes: |
               1. Understand grains and its uses.
               2. Understand pillars and its uses.
               3. Targeting based on pillar variables and grains in states and command line.
               4. Speak to setting this up in its own git repo for security best practice.

         -
           - h2: Grains
           - p: 'Information about the system the minion is running on or custom grains'
           - ul:
             - Static info from minion start
             - Custom grains
             - /etc/salt/minion
             - /etc/salt/grains
           - p: ""
           - link: ['docs.saltstack.com', 'http://docs.saltstack.com/en/latest/topics/pillar/']
           - class_notes: |
               1. Grains give infomation about the underlying system the minion is running on. 
               2. Custom grains can be set via command line or in /etc/salt/grains.
               3. have them browse the docs while we discuss

         -
           - h2: Command Line Examples
           - code: |
               salt '*' grains.ls
               salt '*' grains.items
               salt -G 'os:CentOS' test.ping
           - class_notes: |
               1. The first 2 command line examples list out the minion grains.
               2. You can target based on grains using the '-G' flag via command line.

         -
           - h2: Top file example
           - p: /srv/pillar/top.sls
           - code: |
               'role:web':
                   - match: grain
                   - webserver
               'role:database':
                   - match: grain
                   - database

         -
           - h2: 'Lab: View and Set Grains'
           - ul:
             - List and view available grains
             - set a custom grain of role to your minions
           - class_notes: |
               2. salt \* grains.items; salt \* grans.append role web

         -
           - h2: 'Lab: Using Grains in States'
           - p: 'Targeting based on OS grain information.'
           - ul:
             - create a new file called map.jinja and specify the correct package name for apache by OS
             - use that variable in the install apache state to install the correct package depending on OS
           - class_notes: |
               1. In this lab you will actually want them to go into there previously created state and setup a jinja if statement where if grain['os'] == ubuntu then apache2, etc.

         -
           - h2: cliff notes
           - code: |
               {% set apache = salt['grains.filter_by']({
                   'Debian': {
                          'server': 'apache2',
                          'service': 'apache2',
                          'conf': '/etc/apache2/apache.conf',
                              },
                    'RedHat': {
                          'server': 'httpd',
                          'service': 'httpd',
                          'conf': '/etc/httpd/httpd.conf',
                               },
               }, merge=salt['pillar.get']('apache:lookup')) %}
           - code: |
               {% from "apache/map.jinja" import apache with context %}
               install_apache:
                 pkg.installed:
                   - name: {{ apache.server }}

         -
           - h2: Pillar
           - p: 'Designed to offer global variables to minions'
           - ul:
             - Managed like Salt State Tree
             - /srv/pillar
             - Storing sensitive data
           - class_notes: |
               1. Pillar provides a way to share data with all minions.
               2. Pillar top file and state files stored in /srv/pillar.
               3. Unlike state tree, pillar data is only available for the targeted minion specified by the matcher type. This makes it useful for storing sensitive data specific to a particular minion.

         -
           - h2: Examples
           - code: |
               salt '*' pillar.items
               salt -P 'key:value' test.ping
           - code: |
               {{ pillar['key'] }}
           - class_notes: |
               1. List out pillar items.
               2. You can target base on pillar with the '-P' flag.
               3. You reference pillar items in state file using '{{ pillar['key'] }}' and the value of key will be dropped in.
         -
           - h2: Referencing Pillar in Jinja
           - code: |
               {{ pillar[role][web][mysql] }}
               {{ pillar.get('role.web.mysql', 'default') }}
               {{ salt['pillar.get']('role:web:mysql', 'default') }}
           - class_notes: |
               1. First example is referencing the pillar dictionary by keys, just like in python.
               2. Second is using the python dictionary .get() function.
               3. Third calls the pillar.get function in salt. Best practice.
         -
           - h2: Example pillar sls file
           - p: example in pillar
           - code: |
              bob_ross: 'happy little trees'

              list_of_words:
                - its
                - so
                - fluffy
           - p: example in jinja
           - code: |
               {{ pillar['bob_ross'] }}
           - p: example when rendered
           - code: |
               happy little trees
           - class_notes: |
               1. setting a single value and a list of values
               2. how it looks in jinja template
               3. how it looks when jinja renders it

         -
           - h2: 'Lab: Using Pillar'
           - p: 'Store the following info in Pillar'
           - ul:
             - Wordpress FQDN
             - Database User
             - Database Password
           - class_notes: |
               1. Lab will have

         -
           - h2: Cliff notes top.sls
           - p: /srv/pillar/top.sls
           - code: |
               base:
                 'os:Ubuntu':
                   - match: grain
                   - Ubuntu

                 'os:CentOS':
                   - match: grain
                   - CentOS

         -
           - h2: Cliff notes pillar sls files
           - p: /srv/pillar/Ubuntu/init.sls
           - code: |
               apache_package: apache2

         - 
           - h2: 'Lab: Create database'
           - p: 'update your state to create the wordpress database with the proper user and password'

         - 
           - h2: Cliff Notes
           - code: |
               mysql.db_create
               mysql.user_create
               mysql.grant_add
