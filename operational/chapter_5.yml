---
header:
  author: Bruce Stringer and Justin Phelps
  title: Salt Operational, Chapter 5, Ordering Execution
  description: Through the use of salt requisites students will learn how to make sure certain things happen in a specific order as well as react to changes. EX. make sure packages are installed before starting a service. Restart a service after a config change.

slides:
   -
     - nested:
         -
           - h1: Ordering Execution
           - ul: 
             - Require
             - Require_in
             - Listen
             - Prereq
             - Import
           - class_notes: |
               1. Understand grains and its uses.
               2. Understand pillars and its uses.
               3. Targeting based on pillar variables and grains in states and command line.

         -
           - h2: Require
           - p: 'Used to load the dependent state before the depending current'
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql

               mysql_config:
                 file.managed:
                   - name: /etc/my.cnf
                   - source: salt://files/my.cnf
                   - require:
                     - pkg: mysql_install

           - class_notes: |
               1. The require statement is used to load one action before another action.
               2. States are ordered natively. If an installed package failed, a required state won't run.

         -
           - h2: Require_in
           - p: 'Does the reverse of require'
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql
                   - require_in:
                     - file: mysql_config

               mysql_config:
                 file.managed:
                   - name: /etc/my.cnf
                   - source: salt://files/my.cnf
           - class_notes: |
               1. The require_in is the literal reverse of require.
               2. Example above is the same as the previous example but using require_in.

         -
           - h2: 'Lab: this is required'
           - ul:
             - In your install apache state create a new state to ensure that apache is running
             - Make sure that the service.running state is ran after the install of apache

         -
           - h2: cliff notes
           - code: |
               install_apache:
                 pkg.installed:
                   - name: apache2

               start_apache:
                 service.running:
                   - name: apache2
                   - require:
                     - pkg: install_apache

         -
           - h2: Listen 
           - p: 'Statement used to run tasks based on events in other states'
           - code: |
               mysql_service_restart:
                 service.restart:
                   - name: mysqld
                   - listen:
                     - file: mysql_config
           - class_notes: |
               1. Listen only applies when a high state is run.
               2. Does not listen for user modifications to file but only if salt itself modifies it.
               3. In this example we have a mysql restart action that listens and triggers on the mysql_config action from the previous example.
               4. We recommend using listen instead of the similar 'watch' because watch injects the restart right then, and listen only adds it to the end
               5. Watch could end up restarting a service multiple times instead of just one time at the very end with listen

         -
           - h2: On Changes
           - p: 'Statement used to monitor changes in other states'
           - code: |
               compile_code:
                 cmd.run:
                   - name: make install
                   - cwd: /srv/something-1.4
                   - on_changes:
                       - archive: something-1.4.tar.gz
           - class_notes: |
               1. on_changes is different from listen and watch.
               2. on_changes just runs when the on_changes start's result is True
               3. watch and listen will use the mod_watch() function in the state instead of running as normal, so they provide extra functionality
               4. using listen is probably correct for most usecases, but if you need stuff inserted into the state run as the next task, use on_changes instead of watch

         -
           - h2: Prereq
           - p: 'Allows for actions to be taken based on the expected results of a state that has not yet been executed'
           - code: |
               apache_stop:
                 cmd.run:
                   - name: service apache stop
                   - prereq:
                     - file: site_code

               apache_start:
                 cmd.run:
                   - name: service apache start
                   - on_changes:
                     - file: site_code

               site_code:
                 file.recurse:
                   - name: /opt/site_code
                   - source: salt://site/code
           - class_notes: |
               1. In this example we show how repreq can work in conjunction with on_changes to have Apache shutdown before site_code executes.
               2. Then, apache_start will run based on its listening of site_code being actioned.

         -
           - h2: "Lab: Prereq"
           - ul:
             - In your states, have a state that will run the echo command before apache will be installed
             - Create another state that will run a different echo command after apache gets installed
           - class_notes: |
               1. just have them play with prereq and listen

         -
           - h2: Cliff Notes
           - code: |
               pre_echo_apache:
                 cmd.run:
                   - name: "echo 'apache will be installed'"
                   - prereq:
                     - pkg: install_apache

               post_echo_apache:
                 cmd.run:
                   - name: "echo 'apache has been installed'"
                   - listen:
                     - pkg: install_apache


         -
           - h2: Include
           - p: 'You can include whole sls files in your states'
           - p: init.sls
           - code: |
               include:
                 - foo
           - p: foo.sls
           - code: |
               bar_install:
                 pkg.installed:
                   - name: bar
                   - require:
                     - sls: foo
           - class_notes: |
               1. Here we are including the sls file 'foo' and in the 'bar' action we require the sls 'foo'.

         -
           - h2: "Lab: Include"
           - p: 'Split your big state file into separate directories with a init.sls file and include them in a single state.'
           - ul:
             - Create separate sls files for each of your states.
             - Remove your state from the init.sls file and replace them with includes for the files you created.
           - class_notes: |
               1. Student should be told that this is considered best practice, to have the init just include state files.
               2. State files can have more than one state in them
         
         -
           - h2: Cliff Notes
           - p: /srv/salt/apache/init.sls
           - code: |
               include:
                 - install_apache
                 - create_users
           - class_notes: |
               1. they can name there fils whatever they want. as long as they make sense

         -
           - h2: Order
           - code: |
               mysql_install:
                 pkg.installed:
                   - name: mysql-server
                   - order: 1
           - class_notes: |
               1. States are executed in the order they are defined. Require, Listen, etc should be used.
               2. Most usefule with the keyword 'last', for making a state run at the end of the state tree.

